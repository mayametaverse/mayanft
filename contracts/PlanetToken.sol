// SPDX-License-Identifier: MIT
// @Author: Asad Iqbal
pragma solidity ^0.5.0;

import "./ERC721Full.sol";

contract MayaToken is ERC721Full {
    //TODO: fix type cast errors for address 
    string public Maya_name;
    uint public MayaCount = 0;
    mapping(uint => Maya) public Mayas;

    // store Maya Token information in a data structure
    struct Maya{
        uint id;
        string hash;
        string price;
        string Maya_name;
        // msg.sender is payable 
        address payable owner;
    }
    // event for when Maya token is created
    event MayaGenerated (
        uint id,
        string hash,
        string price,
        string Maya_name,
        address payable owner
    );

    // event for when Maya Token is transfered
    event MayaTokenTransfer(
        uint id, 
        string hash, 
        string price, 
        string Maya_name,
        address payable owner

    );

    constructor() ERC721Full("Maya", "Maya") public { 

    }
    
    // TODO Create function to upload Maya img to ipfs , increment index and mint nft to owner who uploads it
    function createMaya(string memory _imgHash, string memory _price, string memory _MayaName) public {
        // Check for image hash -> should exist
        require(bytes(_imgHash).length > 0);
        // Check Maya has a name 
       require(bytes(_MayaName).length > 0 );
        // Check owner has an address assigned
        require(bytes(_price).length > 0);
        // Check address which uploads file exists
        require( msg.sender != address(0));
        // Increment Maya id upon token creation
        MayaCount++;
       // TODO fix type cast issue in payable

        // Add Maya 
        Mayas[MayaCount] = Maya(MayaCount, _imgHash, _price, _MayaName, msg.sender);
        // Trigger event 
        emit MayaGenerated(MayaCount, _imgHash, _price, _MayaName, msg.sender);
        // track Maya MayaCount
        uint _id = MayaCount;
        // create NFT by minting token -> initial nft is generated by the owner 
        _mint(msg.sender, _id);
    }
    // TODO Create a payable function which checks existing id fetchs img, owner and transfers token ownership
  
   function transferMaya(uint _id) public payable{
        // Check if the id exists and is valid
        require(_id > 0 && _id <= MayaCount);
        // Get the Maya
        Maya memory _Maya = Mayas[_id];
        // Fetch owner
        address payable _owner = _Maya.owner;
        // New owner
        address payable _newowner =  msg.sender;
        // Pay the owner by sending ether
        address(_owner).transfer(msg.value);
        // Transfer Token ownership
        _transferFrom(_owner, _newowner, _id);
        // Update Maya in struct
        _Maya.owner = _newowner;
        // update Maya
        Mayas[_id] = _Maya;
        // Trigger event that token has been transfered
        emit MayaTokenTransfer(_id, _Maya.hash, _Maya.price, _Maya.Maya_name, _Maya.owner);
    }
}